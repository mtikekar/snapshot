#!/bin/bash
# btrfs filesystem with options in fstab:
#  nofail,user,user_subvol_rm_allowed,compress=lzo
# mount cmd: mount /dev/...
# unmount  : umount /dev/...
set -o errexit
set -o nounset
cmd=$(basename $0)

do_help() {
    cat <<EOF
usage:
  $cmd help: print this message
  $cmd init <src>: initialize current dir to store backups of <src>
  $cmd add: copy files from <src> to backup
  $cmd status: show changes between <src> and backup
  $cmd commit [<tag>]: create new snapshot of backup. default <tag> is present timestamp.
  $cmd status --cached: show changes between backup and last snapshot
  $cmd delete <dir>: delete a snapshot
  $cmd keep [<n>]: keep latest <n> snapshots. default <n> is 10.
EOF
}

do_init() {
    [ -z "${1:-}" ] && { echo "usage: $cmd init <src>"; exit 2; }
    ln -s "$1" .src
    btrfs subvolume create .latest
}

check_inited() {
    [ -d .src ] || { echo ".src not found. run init first."; exit 1; }
    [ -d .latest ] || { echo ".latest not found. run init first."; exit 1; }
}

rmexp='(building file list|sent \d+ bytes  received \d+ bytes  total size \d+)$'
log=.latest.log

do_status() {
    check_inited
    if [ "${1:-}" = --cached ]; then
        [ -f $log ] && exec grep -Pv "$rmexp" $log
        echo "No changes to backup since last snapshot"
    else
        rsync --del -a --dry-run --itemize-changes .src/ .latest
    fi
}

do_add() {
    check_inited
    rsync --del -a --inplace --no-whole-file --info=progress2 --log-file=$log \
        .src/ .latest
}

do_commit() {
    check_inited
    cid="${1:-$(date +%F-%T)}"
    [ -e "$cid" ] && { echo "$cid exists. Choose another name."; exit 1; }

    # see if any changes
    if grep -Pqsv "$rmexp" $log; then
        btrfs subvolume snapshot .latest "$cid"
        touch "$cid" # change timestamp of snapshot for sorting
        btrfs property set -ts "$cid" ro true
        mv $log ".$cid.log"
    else
        echo "No changes to backup since last snapshot"
    fi
}

do_delete() {
    [ -z "${1:-}" ] && { echo "missing snapshot name to delete"; exit 2; }
    read -p "Delete snapshot $1? [y/n] " yn
    if [ $yn = y ]; then
        btrfs property set -ts "$1" ro false
        btrfs subvolume delete "$1"
    fi
}

do_keep() {
    check_inited
    n=${1:-10}
    for snap in $(ls -rc | head -n -"$n"); do
        do_delete "$snap"
    done
}

[ "$(type -t do_${1:-})" = function ] || { do_help; exit 2; }
do_$1 "${@:2}"
